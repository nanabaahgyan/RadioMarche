<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Voices_Model_Products', 'doctrine');

/**
 * Voices_Model_BaseProducts
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @property integer $prod_id
 * @property integer $con_id
 * @property integer $user_id
 * @property string $prod_name
 * @property string $unit_measure
 * @property decimal $quantity
 * @property string $quality
 * @property decimal $price
 * @property string $currency
 * @property enum $delivered
 * @property enum $valid
 * @property timestamp $ts_date_entered
 * @property timestamp $ts_date_delivered
 * @property Voices_Model_Contacts $Contacts
 * @property Voices_Model_Users $Users
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Voices_Model_BaseProducts extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('products');
        $this->hasColumn('prod_id', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             'fixed' => false,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('con_id', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             'fixed' => false,
             'unsigned' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('user_id', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             'fixed' => false,
             'unsigned' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('prod_com_id', 'integer', 10, array(
        	'type' => 'integer',
        	'length' => 10,
        	'fixed'	=> false,
        	'unsigned' => true,
        	'primary' => false,
        	'notnull' => true,
        	'autoincrement' => false,
        ));
        $this->hasColumn('prod_name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('unit_measure', 'string', 10, array(
             'type' => 'string',
             'length' => 10,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('quantity', 'decimal', 10, array(
             'type' => 'decimal',
             'length' => 10,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'scale' => '2',
             ));
        $this->hasColumn('quality', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('price', 'decimal', 10, array(
             'type' => 'decimal',
             'length' => 10,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'scale' => '2',
             ));
        $this->hasColumn('currency', 'string', 10, array(
             'type' => 'string',
             'length' => 10,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('valid', 'enum', 3, array(
             'type' => 'enum',
             'length' => 3,
             'fixed' => false,
             'unsigned' => false,
             'values' =>
             array(
              0 => 'yes',
              1 => 'no',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('ts_date_entered', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('ts_date_delivered', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Voices_Model_Contacts as Contacts', array(
             'local' => 'con_id',
             'foreign' => 'con_id'));

        $this->hasOne('Voices_Model_Users as Users', array(
             'local' => 'user_id',
             'foreign' => 'user_id'));
    }
}